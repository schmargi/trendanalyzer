#!/usr/bin/env node

var optimist = require('optimist')
    .usage('Precompile Emblem.js templates.\nUsage: $0 template...', {
      'v': {
        'type': 'boolean',
        'description': 'Show the current version.',
        'alias': 'version'
      },
      'i': {
        'type': 'string',
        'description': 'Read from STDIN, use argument as template name.',
        'alias': 'stdin'
      },
      'f': {
        'type': 'string',
        'description': 'Output File',
        'alias': 'output'
      }
    })

    .check(function(argv) {
      var template = [0];

      if(argv.stdin || argv.version) return;

      if (!argv._.length) {
        throw 'Must define at least one template or directory.';
      }

      argv._.forEach(function(template) {
        try {
          fs.statSync(template);
        } catch (err) {
          throw 'Unable to open template file "' + template + '"';
        }
      });
    });

var fs = require('fs');
var emblem = require('../dist/cjs/emblem.js')['default'];

var argv = optimist.argv;
var template = argv._[0];

if(argv.version) {
  console.log(emblem.VERSION);
  return;
}

function processData(data) {
  var output = emblem.compile(data);

  if (argv.output) {
    fs.writeFileSync(argv.output, output, 'utf8');
  } else {
    console.log(output);
  }
}

function processFile(templatePath) {
  var stat = fs.statSync(templatePath);

  if (stat.isDirectory()) {
    fs.readdirSync(templatePath).map(function(file) {
      var path = templatePath + '/' + file;

      if (/\.emblem$/.test(path) || fs.statSync(path).isDirectory()) {
        processFile(path);
      }
    });
  } else {
    var data = fs.readFileSync(templatePath, 'utf8');

    processData(data);
  }
}

if(argv.stdin) {
  var input = "";

  template = (argv.stdin === true ? 'template' : argv.stdin );

  process.stdin.on('data', function(data) {
    input += data;
  });

  process.stdin.on('end', function() {
    processData(input);
  });

  process.stdin.setEncoding('utf8');
  process.stdin.resume();

} else {
  argv._.forEach(function(templatePath) {
    processFile(templatePath);
  });
}


